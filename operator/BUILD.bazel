load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")

go_library(
    name = "go_default_library",
    srcs = ["main.go"],
    importpath = "github.com/f110/lagrangian-proxy/operator",
    visibility = ["//visibility:private"],
    deps = [
        "//operator/pkg/api/v1:go_default_library",
        "//operator/pkg/controllers:go_default_library",
        "//operator/pkg/metrics:go_default_library",
        "//vendor/github.com/coreos/etcd-operator/pkg/apis/etcd/v1beta2:go_default_library",
        "//vendor/github.com/coreos/prometheus-operator/pkg/apis/monitoring/v1:go_default_library",
        "//vendor/github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha2:go_default_library",
        "//vendor/k8s.io/apimachinery/pkg/runtime:go_default_library",
        "//vendor/k8s.io/client-go/kubernetes/scheme:go_default_library",
        "//vendor/k8s.io/client-go/plugin/pkg/client/auth/gcp:go_default_library",
        "//vendor/sigs.k8s.io/controller-runtime:go_default_library",
        "//vendor/sigs.k8s.io/controller-runtime/pkg/log/zap:go_default_library",
        "//vendor/sigs.k8s.io/controller-runtime/pkg/metrics:go_default_library",
    ],
)

go_binary(
    name = "operator",
    embed = [":go_default_library"],
    visibility = ["//visibility:public"],
)

load("//build/rules/go:controller-tools.bzl", "controller_gen")

controller_gen(
    name = "generate",
    extra_args = [
        "object:headerFile=./hack/boilerplate.go.txt",
        "paths=\"./...\"",
    ],
)

controller_gen(
    name = "manifests",
    extra_args = [
        "crd:trivialVersions=true",
        "crd:crdVersions=v1",
        "rbac:roleName=manager-role",
        "webhook",
        "paths=\"./...\"",
        "output:crd:artifacts:config=config/crd/bases",
    ],
)

load("@rules_pkg//:pkg.bzl", "pkg_tar")
load("@io_bazel_rules_docker//container:container.bzl", "container_image", "container_push")

pkg_tar(
    name = "bin",
    srcs = ["//operator"],
    mode = "0755",
    package_dir = "/usr/local/bin",
)

container_image(
    name = "image",
    base = "@com_google_distroless_base//image",
    entrypoint = ["/usr/local/bin/operator"],
    tars = [":bin"],
)

load("//:VERSION.bzl", "VERSION")

container_push(
    name = "push",
    format = "Docker",
    image = ":image",
    registry = "quay.io",
    repository = "f110/lagrangian-proxy-operator",
    tag = VERSION,
)
